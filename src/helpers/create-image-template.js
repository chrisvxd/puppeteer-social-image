import baseTemplate from "./base-template";
import { imageCss, buildUnsplashUrl } from ".";

const handlebars = require("handlebars");

const head = `
  <link href="https://fonts.googleapis.com/css?family=Lato:400,500,600,700,800,900&display=swap" rel="stylesheet">
`;

const imageTemplate = body =>
  handlebars.compile(`
<div class="Main">
  {{#if backgroundImageUrl}}<div class="Background">
    <div
      class="Image Image--cover Image--anchor{{backgroundImageAnchor}}  {{#if backgroundImageOverlay}}Image--overlay Image--dark{{/if}}">
      <img class="Image-img" src="{{backgroundImageUrl}}" />
    </div>
  </div>{{/if}}
  <div class="Inner">
    ${body}
  </div>
  {{#if includeWatermark}}
  <div class="Watermark">
    {{#if watermarkUrl}}Generated by <span class="Watermark-logo">{{watermarkUrl}}</span>{{/if}}
    {{#if watermark}}{{watermark}}{{/if}}
  </div>{{/if}}
</div>
`);

const buildStyles = ({
  background = "black",
  backgroundImageUrl,
  color = "white",
  fontFamily = '"Lato", "Helvetica Neue", sans-serif',
  additionalStyles = ""
} = {}) => `
${additionalStyles}

.Background {
  position: absolute;
  left: 0;
  top: 0;
  width: 100%;
  height: 100%;
  z-index: -1;
}

${imageCss};

.Main {
  background: ${backgroundImageUrl ? "transparent" : background};
  position: relative;
  width: 100%;
  height: 100%;
  z-index: -2;
}

.Inner {
  background: ${backgroundImageUrl ? "transparent" : background};
  color: ${color};
  font-family: ${fontFamily};
  width: 100%;
  height: 100%;
}

.Watermark {
  color: white;
  font-family: ${fontFamily};
  font-size: 24px;
  position: absolute;
  opacity: 0.8;
  right: 8px;
  bottom: 8px;
}

.Watermark-logo {
  font-weight: 900;
}
`;

export default ({
  body,
  styles,
  size,
  templateParams: {
    gradient = true,
    imageUrl,
    unsplashId,
    unsplashKeywords,
    ...templateParams
  }
}) => {
  let backgroundImageUrl;

  if (imageUrl) {
    backgroundImageUrl = imageUrl;
  } else if (unsplashId) {
    backgroundImageUrl = buildUnsplashUrl({ unsplashId, size });
  } else if (unsplashKeywords) {
    backgroundImageUrl = buildUnsplashUrl({ unsplashKeywords, size });
  }

  return baseTemplate({
    body: imageTemplate(body)({
      backgroundImageAnchor: "C",
      backgroundImageOverlay: gradient,
      backgroundImageUrl,
      body,
      includeWatermark:
        templateParams.watermarkUrl || templateParams.watermark || false,
      ...templateParams
    }),
    height: size.height,
    head,
    styles: buildStyles({
      backgroundImageUrl,
      additionalStyles: styles,
      ...templateParams
    }),
    width: size.width
  });
};
